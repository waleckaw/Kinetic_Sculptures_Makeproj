ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"Analog_PWM_Functions.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.map,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	map:
  26              	.LVL0:
  27              	.LFB328:
  28              		.file 1 "Src/Analog_PWM_Functions.c"
   1:Src/Analog_PWM_Functions.c **** /*
   2:Src/Analog_PWM_Functions.c ****  * Analog_PWM_Functions.c
   3:Src/Analog_PWM_Functions.c ****  *
   4:Src/Analog_PWM_Functions.c ****  *  Created on: Mar 9, 2020
   5:Src/Analog_PWM_Functions.c ****  *      Author: SupremeOverlord
   6:Src/Analog_PWM_Functions.c ****  */
   7:Src/Analog_PWM_Functions.c **** 
   8:Src/Analog_PWM_Functions.c **** /* Includes ------------------------------------------------------------------*/
   9:Src/Analog_PWM_Functions.c **** #include "FreeRTOS.h"
  10:Src/Analog_PWM_Functions.c **** #include "task.h"
  11:Src/Analog_PWM_Functions.c **** #include "main.h"
  12:Src/Analog_PWM_Functions.c **** #include "cmsis_os.h"
  13:Src/Analog_PWM_Functions.c **** #include "CustomUserfunctions.h"
  14:Src/Analog_PWM_Functions.c **** #include "httpclient.h"
  15:Src/Analog_PWM_Functions.c **** #include "http_lib.h"
  16:Src/Analog_PWM_Functions.c **** #include "es_wifi.h"
  17:Src/Analog_PWM_Functions.c **** #include <stdint.h>
  18:Src/Analog_PWM_Functions.c **** 
  19:Src/Analog_PWM_Functions.c **** //module defines
  20:Src/Analog_PWM_Functions.c **** #define ANALOG_MIN 700
  21:Src/Analog_PWM_Functions.c **** #define ANALOG_MAX 2500
  22:Src/Analog_PWM_Functions.c **** 
  23:Src/Analog_PWM_Functions.c **** //module declarations
  24:Src/Analog_PWM_Functions.c **** extern TIM_HandleTypeDef htim15;
  25:Src/Analog_PWM_Functions.c **** extern TIM_HandleTypeDef htim4;
  26:Src/Analog_PWM_Functions.c **** extern TIM_HandleTypeDef htim16;
  27:Src/Analog_PWM_Functions.c **** 
  28:Src/Analog_PWM_Functions.c **** 
  29:Src/Analog_PWM_Functions.c **** //public functions
  30:Src/Analog_PWM_Functions.c **** void setDuty(int duty);
ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 2


  31:Src/Analog_PWM_Functions.c **** int analogToPulse(int analogVal, TIM_HandleTypeDef *channel);
  32:Src/Analog_PWM_Functions.c **** int analogToDegrees(int analogVal);
  33:Src/Analog_PWM_Functions.c **** int degreesToDC(int deg);
  34:Src/Analog_PWM_Functions.c **** int degToPulse(int deg);
  35:Src/Analog_PWM_Functions.c **** 
  36:Src/Analog_PWM_Functions.c **** //private module functions
  37:Src/Analog_PWM_Functions.c **** static int map(int x, int in_min, int in_max, int out_min, int out_max);
  38:Src/Analog_PWM_Functions.c **** 
  39:Src/Analog_PWM_Functions.c **** //DISCONTINUED - LOWER CONTROL RESOLUTION THAN SETTING PULSE WITH
  40:Src/Analog_PWM_Functions.c **** void setDuty(int duty)
  41:Src/Analog_PWM_Functions.c **** {
  42:Src/Analog_PWM_Functions.c **** 	int MAX_PERIOD = __HAL_TIM_GET_AUTORELOAD(&htim15);
  43:Src/Analog_PWM_Functions.c **** 	if (duty <= 0) {
  44:Src/Analog_PWM_Functions.c **** 		TIM15->CCR1 = 0;
  45:Src/Analog_PWM_Functions.c **** 		duty = 0;
  46:Src/Analog_PWM_Functions.c **** 	} else if (duty >= 100) {
  47:Src/Analog_PWM_Functions.c **** 		TIM15->CCR1 = __HAL_TIM_GET_AUTORELOAD(&htim15);
  48:Src/Analog_PWM_Functions.c **** 		duty = 100;
  49:Src/Analog_PWM_Functions.c **** 	} else {
  50:Src/Analog_PWM_Functions.c **** 		TIM15->CCR1 = (MAX_PERIOD*duty)/100;
  51:Src/Analog_PWM_Functions.c **** 	}
  52:Src/Analog_PWM_Functions.c **** 	TIM15->CCMR1 |= TIM_CCMR1_OC1PE;
  53:Src/Analog_PWM_Functions.c **** }
  54:Src/Analog_PWM_Functions.c **** 
  55:Src/Analog_PWM_Functions.c **** //set pulse to base servo, or turn servo off
  56:Src/Analog_PWM_Functions.c **** void setPulseBase(int pulse, bool ON)
  57:Src/Analog_PWM_Functions.c **** {
  58:Src/Analog_PWM_Functions.c **** 	if (pulse <= BASE_PULSE_MIN) {
  59:Src/Analog_PWM_Functions.c **** 		TIM15->CCR1 = BASE_PULSE_MIN;
  60:Src/Analog_PWM_Functions.c **** 	} else if (pulse >= BASE_PULSE_MAX) {
  61:Src/Analog_PWM_Functions.c **** 		TIM15->CCR1 = BASE_PULSE_MAX;
  62:Src/Analog_PWM_Functions.c **** 	} else {
  63:Src/Analog_PWM_Functions.c **** 		TIM15->CCR1 = pulse;
  64:Src/Analog_PWM_Functions.c **** 	}
  65:Src/Analog_PWM_Functions.c **** 	if (!ON)
  66:Src/Analog_PWM_Functions.c **** 	{
  67:Src/Analog_PWM_Functions.c **** 		TIM15->CCR1 = 0;
  68:Src/Analog_PWM_Functions.c **** 	}
  69:Src/Analog_PWM_Functions.c **** 
  70:Src/Analog_PWM_Functions.c **** 	TIM15->CCMR1 |= TIM_CCMR1_OC1PE;
  71:Src/Analog_PWM_Functions.c **** }
  72:Src/Analog_PWM_Functions.c **** 
  73:Src/Analog_PWM_Functions.c **** //set pulse to middle tier servo, or turn servo off
  74:Src/Analog_PWM_Functions.c **** void setPulseMid(int pulse, bool ON)
  75:Src/Analog_PWM_Functions.c **** {
  76:Src/Analog_PWM_Functions.c **** 	if (pulse <= MID_PULSE_MIN) {
  77:Src/Analog_PWM_Functions.c **** 		TIM4->CCR3 = MID_PULSE_MIN;
  78:Src/Analog_PWM_Functions.c **** 	} else if (pulse >= MID_PULSE_MAX) {
  79:Src/Analog_PWM_Functions.c **** 		TIM4->CCR3 = MID_PULSE_MAX;
  80:Src/Analog_PWM_Functions.c **** 	} else {
  81:Src/Analog_PWM_Functions.c **** 		TIM4->CCR3 = pulse;
  82:Src/Analog_PWM_Functions.c **** 	}
  83:Src/Analog_PWM_Functions.c **** 	if (!ON)
  84:Src/Analog_PWM_Functions.c **** 	{
  85:Src/Analog_PWM_Functions.c **** 		TIM4->CCR3 = 0;
  86:Src/Analog_PWM_Functions.c **** 	}
  87:Src/Analog_PWM_Functions.c **** 
ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 3


  88:Src/Analog_PWM_Functions.c **** 	TIM4->CCMR3 |= TIM_CCMR1_OC1PE;
  89:Src/Analog_PWM_Functions.c **** }
  90:Src/Analog_PWM_Functions.c **** 
  91:Src/Analog_PWM_Functions.c **** //set pulse to top servo, or turn servo off
  92:Src/Analog_PWM_Functions.c **** void setPulseTop(int pulse, bool ON)
  93:Src/Analog_PWM_Functions.c **** {
  94:Src/Analog_PWM_Functions.c **** 	if (pulse <= TOP_PULSE_MIN) {
  95:Src/Analog_PWM_Functions.c **** 		TIM16->CCR1 = TOP_PULSE_MIN;
  96:Src/Analog_PWM_Functions.c **** 		//pulse = 200;
  97:Src/Analog_PWM_Functions.c **** 	} else if (pulse >= TOP_PULSE_MAX) {
  98:Src/Analog_PWM_Functions.c **** 		TIM16->CCR1 = TOP_PULSE_MAX;
  99:Src/Analog_PWM_Functions.c **** 	} else {
 100:Src/Analog_PWM_Functions.c **** 		TIM16->CCR1 = pulse;
 101:Src/Analog_PWM_Functions.c **** 	}
 102:Src/Analog_PWM_Functions.c **** 
 103:Src/Analog_PWM_Functions.c **** 	if (!ON)
 104:Src/Analog_PWM_Functions.c **** 	{
 105:Src/Analog_PWM_Functions.c **** 		TIM16->CCR1 = 0;
 106:Src/Analog_PWM_Functions.c **** 	}
 107:Src/Analog_PWM_Functions.c **** 
 108:Src/Analog_PWM_Functions.c **** 	TIM16->CCMR1 |= TIM_CCMR1_OC1PE;
 109:Src/Analog_PWM_Functions.c **** }
 110:Src/Analog_PWM_Functions.c **** 
 111:Src/Analog_PWM_Functions.c **** void setPulse(int pulse, bool ON, uint8_t link)
 112:Src/Analog_PWM_Functions.c **** {
 113:Src/Analog_PWM_Functions.c **** 
 114:Src/Analog_PWM_Functions.c **** 	if (link == 0) {
 115:Src/Analog_PWM_Functions.c **** 		setPulseBase(pulse, ON);
 116:Src/Analog_PWM_Functions.c **** 	} else if (link == 1) {
 117:Src/Analog_PWM_Functions.c **** 		setPulseMid(pulse, ON);
 118:Src/Analog_PWM_Functions.c **** 	} else if (link == 2) {
 119:Src/Analog_PWM_Functions.c **** 		setPulseTop(pulse, ON);
 120:Src/Analog_PWM_Functions.c **** 	}
 121:Src/Analog_PWM_Functions.c **** }
 122:Src/Analog_PWM_Functions.c **** 
 123:Src/Analog_PWM_Functions.c **** //get analog value from desired ADC (base = &hadc1, mid = &hadc2, top = &hadc3)
 124:Src/Analog_PWM_Functions.c **** uint16_t getAnalogVal(ADC_HandleTypeDef *ADC)
 125:Src/Analog_PWM_Functions.c **** {
 126:Src/Analog_PWM_Functions.c **** 	HAL_ADC_Start(ADC);
 127:Src/Analog_PWM_Functions.c **** 	HAL_ADC_PollForConversion(ADC, 5);
 128:Src/Analog_PWM_Functions.c **** 	return HAL_ADC_GetValue(ADC);
 129:Src/Analog_PWM_Functions.c **** }
 130:Src/Analog_PWM_Functions.c **** 
 131:Src/Analog_PWM_Functions.c **** //basic scaling function given input + input & output bounds
 132:Src/Analog_PWM_Functions.c **** static int map(int x, int in_min, int in_max, int out_min, int out_max)
 133:Src/Analog_PWM_Functions.c **** {
  29              		.loc 1 133 1 view -0
  30              		.cfi_startproc
  31              		@ args = 4, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              		.loc 1 133 1 is_stmt 0 view .LVU1
  35 0000 10B4     		push	{r4}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 4
  38              		.cfi_offset 4, -4
 134:Src/Analog_PWM_Functions.c **** 	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 4


  39              		.loc 1 134 2 is_stmt 1 view .LVU2
  40              		.loc 1 134 12 is_stmt 0 view .LVU3
  41 0002 401A     		subs	r0, r0, r1
  42              	.LVL1:
  43              		.loc 1 134 33 view .LVU4
  44 0004 019C     		ldr	r4, [sp, #4]
  45 0006 E41A     		subs	r4, r4, r3
  46              		.loc 1 134 22 view .LVU5
  47 0008 04FB00F4 		mul	r4, r4, r0
  48              		.loc 1 134 54 view .LVU6
  49 000c 511A     		subs	r1, r2, r1
  50              	.LVL2:
  51              		.loc 1 134 44 view .LVU7
  52 000e 94FBF1F4 		sdiv	r4, r4, r1
 135:Src/Analog_PWM_Functions.c **** }
  53              		.loc 1 135 1 view .LVU8
  54 0012 E018     		adds	r0, r4, r3
  55 0014 5DF8044B 		ldr	r4, [sp], #4
  56              	.LCFI1:
  57              		.cfi_restore 4
  58              		.cfi_def_cfa_offset 0
  59              	.LVL3:
  60              		.loc 1 135 1 view .LVU9
  61 0018 7047     		bx	lr
  62              		.cfi_endproc
  63              	.LFE328:
  65              		.section	.text.setDuty,"ax",%progbits
  66              		.align	1
  67              		.global	setDuty
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu fpv4-sp-d16
  73              	setDuty:
  74              	.LVL4:
  75              	.LFB322:
  41:Src/Analog_PWM_Functions.c **** 	int MAX_PERIOD = __HAL_TIM_GET_AUTORELOAD(&htim15);
  76              		.loc 1 41 1 is_stmt 1 view -0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              		@ link register save eliminated.
  42:Src/Analog_PWM_Functions.c **** 	if (duty <= 0) {
  81              		.loc 1 42 2 view .LVU11
  42:Src/Analog_PWM_Functions.c **** 	if (duty <= 0) {
  82              		.loc 1 42 19 is_stmt 0 view .LVU12
  83 0000 0F4B     		ldr	r3, .L8
  84 0002 1B68     		ldr	r3, [r3]
  85 0004 DA6A     		ldr	r2, [r3, #44]
  86              	.LVL5:
  43:Src/Analog_PWM_Functions.c **** 		TIM15->CCR1 = 0;
  87              		.loc 1 43 2 is_stmt 1 view .LVU13
  43:Src/Analog_PWM_Functions.c **** 		TIM15->CCR1 = 0;
  88              		.loc 1 43 5 is_stmt 0 view .LVU14
  89 0006 0028     		cmp	r0, #0
  43:Src/Analog_PWM_Functions.c **** 		TIM15->CCR1 = 0;
  90              		.loc 1 43 5 view .LVU15
ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 5


  91 0008 05DD     		ble	.L7
  46:Src/Analog_PWM_Functions.c **** 		TIM15->CCR1 = __HAL_TIM_GET_AUTORELOAD(&htim15);
  92              		.loc 1 46 9 is_stmt 1 view .LVU16
  46:Src/Analog_PWM_Functions.c **** 		TIM15->CCR1 = __HAL_TIM_GET_AUTORELOAD(&htim15);
  93              		.loc 1 46 12 is_stmt 0 view .LVU17
  94 000a 6328     		cmp	r0, #99
  95 000c 0CDD     		ble	.L6
  47:Src/Analog_PWM_Functions.c **** 		duty = 100;
  96              		.loc 1 47 3 is_stmt 1 view .LVU18
  47:Src/Analog_PWM_Functions.c **** 		duty = 100;
  97              		.loc 1 47 17 is_stmt 0 view .LVU19
  98 000e DA6A     		ldr	r2, [r3, #44]
  99              	.LVL6:
  47:Src/Analog_PWM_Functions.c **** 		duty = 100;
 100              		.loc 1 47 15 view .LVU20
 101 0010 0C4B     		ldr	r3, .L8+4
 102 0012 5A63     		str	r2, [r3, #52]
  48:Src/Analog_PWM_Functions.c **** 	} else {
 103              		.loc 1 48 3 is_stmt 1 view .LVU21
 104              	.LVL7:
  48:Src/Analog_PWM_Functions.c **** 	} else {
 105              		.loc 1 48 3 is_stmt 0 view .LVU22
 106 0014 02E0     		b	.L5
 107              	.LVL8:
 108              	.L7:
  44:Src/Analog_PWM_Functions.c **** 		duty = 0;
 109              		.loc 1 44 3 is_stmt 1 view .LVU23
  44:Src/Analog_PWM_Functions.c **** 		duty = 0;
 110              		.loc 1 44 15 is_stmt 0 view .LVU24
 111 0016 0B4B     		ldr	r3, .L8+4
 112 0018 0022     		movs	r2, #0
 113              	.LVL9:
  44:Src/Analog_PWM_Functions.c **** 		duty = 0;
 114              		.loc 1 44 15 view .LVU25
 115 001a 5A63     		str	r2, [r3, #52]
  45:Src/Analog_PWM_Functions.c **** 	} else if (duty >= 100) {
 116              		.loc 1 45 3 is_stmt 1 view .LVU26
 117              	.LVL10:
 118              	.L5:
  52:Src/Analog_PWM_Functions.c **** }
 119              		.loc 1 52 2 view .LVU27
  52:Src/Analog_PWM_Functions.c **** }
 120              		.loc 1 52 15 is_stmt 0 view .LVU28
 121 001c 094A     		ldr	r2, .L8+4
 122 001e 9369     		ldr	r3, [r2, #24]
 123 0020 43F00803 		orr	r3, r3, #8
 124 0024 9361     		str	r3, [r2, #24]
  53:Src/Analog_PWM_Functions.c **** 
 125              		.loc 1 53 1 view .LVU29
 126 0026 7047     		bx	lr
 127              	.LVL11:
 128              	.L6:
  50:Src/Analog_PWM_Functions.c **** 	}
 129              		.loc 1 50 3 is_stmt 1 view .LVU30
  50:Src/Analog_PWM_Functions.c **** 	}
 130              		.loc 1 50 28 is_stmt 0 view .LVU31
 131 0028 00FB02F0 		mul	r0, r0, r2
ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 6


 132              	.LVL12:
  50:Src/Analog_PWM_Functions.c **** 	}
 133              		.loc 1 50 34 view .LVU32
 134 002c 064B     		ldr	r3, .L8+8
 135 002e 83FB0023 		smull	r2, r3, r3, r0
 136              	.LVL13:
  50:Src/Analog_PWM_Functions.c **** 	}
 137              		.loc 1 50 34 view .LVU33
 138 0032 C017     		asrs	r0, r0, #31
 139 0034 C0EB6310 		rsb	r0, r0, r3, asr #5
  50:Src/Analog_PWM_Functions.c **** 	}
 140              		.loc 1 50 15 view .LVU34
 141 0038 024B     		ldr	r3, .L8+4
 142 003a 5863     		str	r0, [r3, #52]
 143 003c EEE7     		b	.L5
 144              	.L9:
 145 003e 00BF     		.align	2
 146              	.L8:
 147 0040 00000000 		.word	htim15
 148 0044 00400140 		.word	1073823744
 149 0048 1F85EB51 		.word	1374389535
 150              		.cfi_endproc
 151              	.LFE322:
 153              		.section	.text.setPulseBase,"ax",%progbits
 154              		.align	1
 155              		.global	setPulseBase
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 159              		.fpu fpv4-sp-d16
 161              	setPulseBase:
 162              	.LVL14:
 163              	.LFB323:
  57:Src/Analog_PWM_Functions.c **** 	if (pulse <= BASE_PULSE_MIN) {
 164              		.loc 1 57 1 is_stmt 1 view -0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168              		@ link register save eliminated.
  58:Src/Analog_PWM_Functions.c **** 		TIM15->CCR1 = BASE_PULSE_MIN;
 169              		.loc 1 58 2 view .LVU36
  58:Src/Analog_PWM_Functions.c **** 		TIM15->CCR1 = BASE_PULSE_MIN;
 170              		.loc 1 58 5 is_stmt 0 view .LVU37
 171 0000 6E28     		cmp	r0, #110
 172 0002 0CDC     		bgt	.L11
  59:Src/Analog_PWM_Functions.c **** 	} else if (pulse >= BASE_PULSE_MAX) {
 173              		.loc 1 59 3 is_stmt 1 view .LVU38
  59:Src/Analog_PWM_Functions.c **** 	} else if (pulse >= BASE_PULSE_MAX) {
 174              		.loc 1 59 15 is_stmt 0 view .LVU39
 175 0004 0B4B     		ldr	r3, .L15
 176 0006 6E22     		movs	r2, #110
 177 0008 5A63     		str	r2, [r3, #52]
 178              	.L12:
  65:Src/Analog_PWM_Functions.c **** 	{
 179              		.loc 1 65 2 is_stmt 1 view .LVU40
  65:Src/Analog_PWM_Functions.c **** 	{
 180              		.loc 1 65 5 is_stmt 0 view .LVU41
ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 7


 181 000a 11B9     		cbnz	r1, .L14
  67:Src/Analog_PWM_Functions.c **** 	}
 182              		.loc 1 67 3 is_stmt 1 view .LVU42
  67:Src/Analog_PWM_Functions.c **** 	}
 183              		.loc 1 67 15 is_stmt 0 view .LVU43
 184 000c 094B     		ldr	r3, .L15
 185 000e 0022     		movs	r2, #0
 186 0010 5A63     		str	r2, [r3, #52]
 187              	.L14:
  70:Src/Analog_PWM_Functions.c **** }
 188              		.loc 1 70 2 is_stmt 1 view .LVU44
  70:Src/Analog_PWM_Functions.c **** }
 189              		.loc 1 70 15 is_stmt 0 view .LVU45
 190 0012 084A     		ldr	r2, .L15
 191 0014 9369     		ldr	r3, [r2, #24]
 192 0016 43F00803 		orr	r3, r3, #8
 193 001a 9361     		str	r3, [r2, #24]
  71:Src/Analog_PWM_Functions.c **** 
 194              		.loc 1 71 1 view .LVU46
 195 001c 7047     		bx	lr
 196              	.L11:
  60:Src/Analog_PWM_Functions.c **** 		TIM15->CCR1 = BASE_PULSE_MAX;
 197              		.loc 1 60 9 is_stmt 1 view .LVU47
  60:Src/Analog_PWM_Functions.c **** 		TIM15->CCR1 = BASE_PULSE_MAX;
 198              		.loc 1 60 12 is_stmt 0 view .LVU48
 199 001e B0F5F07F 		cmp	r0, #480
 200 0022 04DB     		blt	.L13
  61:Src/Analog_PWM_Functions.c **** 	} else {
 201              		.loc 1 61 3 is_stmt 1 view .LVU49
  61:Src/Analog_PWM_Functions.c **** 	} else {
 202              		.loc 1 61 15 is_stmt 0 view .LVU50
 203 0024 034B     		ldr	r3, .L15
 204 0026 4FF4F072 		mov	r2, #480
 205 002a 5A63     		str	r2, [r3, #52]
 206 002c EDE7     		b	.L12
 207              	.L13:
  63:Src/Analog_PWM_Functions.c **** 	}
 208              		.loc 1 63 3 is_stmt 1 view .LVU51
  63:Src/Analog_PWM_Functions.c **** 	}
 209              		.loc 1 63 15 is_stmt 0 view .LVU52
 210 002e 014B     		ldr	r3, .L15
 211 0030 5863     		str	r0, [r3, #52]
 212 0032 EAE7     		b	.L12
 213              	.L16:
 214              		.align	2
 215              	.L15:
 216 0034 00400140 		.word	1073823744
 217              		.cfi_endproc
 218              	.LFE323:
 220              		.section	.text.setPulseMid,"ax",%progbits
 221              		.align	1
 222              		.global	setPulseMid
 223              		.syntax unified
 224              		.thumb
 225              		.thumb_func
 226              		.fpu fpv4-sp-d16
 228              	setPulseMid:
ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 8


 229              	.LVL15:
 230              	.LFB324:
  75:Src/Analog_PWM_Functions.c **** 	if (pulse <= MID_PULSE_MIN) {
 231              		.loc 1 75 1 is_stmt 1 view -0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 235              		@ link register save eliminated.
  76:Src/Analog_PWM_Functions.c **** 		TIM4->CCR3 = MID_PULSE_MIN;
 236              		.loc 1 76 2 view .LVU54
  76:Src/Analog_PWM_Functions.c **** 		TIM4->CCR3 = MID_PULSE_MIN;
 237              		.loc 1 76 5 is_stmt 0 view .LVU55
 238 0000 5A28     		cmp	r0, #90
 239 0002 0CDC     		bgt	.L18
  77:Src/Analog_PWM_Functions.c **** 	} else if (pulse >= MID_PULSE_MAX) {
 240              		.loc 1 77 3 is_stmt 1 view .LVU56
  77:Src/Analog_PWM_Functions.c **** 	} else if (pulse >= MID_PULSE_MAX) {
 241              		.loc 1 77 14 is_stmt 0 view .LVU57
 242 0004 0B4B     		ldr	r3, .L22
 243 0006 5A22     		movs	r2, #90
 244 0008 DA63     		str	r2, [r3, #60]
 245              	.L19:
  83:Src/Analog_PWM_Functions.c **** 	{
 246              		.loc 1 83 2 is_stmt 1 view .LVU58
  83:Src/Analog_PWM_Functions.c **** 	{
 247              		.loc 1 83 5 is_stmt 0 view .LVU59
 248 000a 11B9     		cbnz	r1, .L21
  85:Src/Analog_PWM_Functions.c **** 	}
 249              		.loc 1 85 3 is_stmt 1 view .LVU60
  85:Src/Analog_PWM_Functions.c **** 	}
 250              		.loc 1 85 14 is_stmt 0 view .LVU61
 251 000c 094B     		ldr	r3, .L22
 252 000e 0022     		movs	r2, #0
 253 0010 DA63     		str	r2, [r3, #60]
 254              	.L21:
  88:Src/Analog_PWM_Functions.c **** }
 255              		.loc 1 88 2 is_stmt 1 view .LVU62
  88:Src/Analog_PWM_Functions.c **** }
 256              		.loc 1 88 14 is_stmt 0 view .LVU63
 257 0012 084A     		ldr	r2, .L22
 258 0014 536D     		ldr	r3, [r2, #84]
 259 0016 43F00803 		orr	r3, r3, #8
 260 001a 5365     		str	r3, [r2, #84]
  89:Src/Analog_PWM_Functions.c **** 
 261              		.loc 1 89 1 view .LVU64
 262 001c 7047     		bx	lr
 263              	.L18:
  78:Src/Analog_PWM_Functions.c **** 		TIM4->CCR3 = MID_PULSE_MAX;
 264              		.loc 1 78 9 is_stmt 1 view .LVU65
  78:Src/Analog_PWM_Functions.c **** 		TIM4->CCR3 = MID_PULSE_MAX;
 265              		.loc 1 78 12 is_stmt 0 view .LVU66
 266 001e B0F5D27F 		cmp	r0, #420
 267 0022 04DB     		blt	.L20
  79:Src/Analog_PWM_Functions.c **** 	} else {
 268              		.loc 1 79 3 is_stmt 1 view .LVU67
  79:Src/Analog_PWM_Functions.c **** 	} else {
 269              		.loc 1 79 14 is_stmt 0 view .LVU68
ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 9


 270 0024 034B     		ldr	r3, .L22
 271 0026 4FF4D272 		mov	r2, #420
 272 002a DA63     		str	r2, [r3, #60]
 273 002c EDE7     		b	.L19
 274              	.L20:
  81:Src/Analog_PWM_Functions.c **** 	}
 275              		.loc 1 81 3 is_stmt 1 view .LVU69
  81:Src/Analog_PWM_Functions.c **** 	}
 276              		.loc 1 81 14 is_stmt 0 view .LVU70
 277 002e 014B     		ldr	r3, .L22
 278 0030 D863     		str	r0, [r3, #60]
 279 0032 EAE7     		b	.L19
 280              	.L23:
 281              		.align	2
 282              	.L22:
 283 0034 00080040 		.word	1073743872
 284              		.cfi_endproc
 285              	.LFE324:
 287              		.section	.text.setPulseTop,"ax",%progbits
 288              		.align	1
 289              		.global	setPulseTop
 290              		.syntax unified
 291              		.thumb
 292              		.thumb_func
 293              		.fpu fpv4-sp-d16
 295              	setPulseTop:
 296              	.LVL16:
 297              	.LFB325:
  93:Src/Analog_PWM_Functions.c **** 	if (pulse <= TOP_PULSE_MIN) {
 298              		.loc 1 93 1 is_stmt 1 view -0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302              		@ link register save eliminated.
  94:Src/Analog_PWM_Functions.c **** 		TIM16->CCR1 = TOP_PULSE_MIN;
 303              		.loc 1 94 2 view .LVU72
  94:Src/Analog_PWM_Functions.c **** 		TIM16->CCR1 = TOP_PULSE_MIN;
 304              		.loc 1 94 5 is_stmt 0 view .LVU73
 305 0000 5A28     		cmp	r0, #90
 306 0002 0CDC     		bgt	.L25
  95:Src/Analog_PWM_Functions.c **** 		//pulse = 200;
 307              		.loc 1 95 3 is_stmt 1 view .LVU74
  95:Src/Analog_PWM_Functions.c **** 		//pulse = 200;
 308              		.loc 1 95 15 is_stmt 0 view .LVU75
 309 0004 0B4B     		ldr	r3, .L29
 310 0006 5A22     		movs	r2, #90
 311 0008 5A63     		str	r2, [r3, #52]
 312              	.L26:
 103:Src/Analog_PWM_Functions.c **** 	{
 313              		.loc 1 103 2 is_stmt 1 view .LVU76
 103:Src/Analog_PWM_Functions.c **** 	{
 314              		.loc 1 103 5 is_stmt 0 view .LVU77
 315 000a 11B9     		cbnz	r1, .L28
 105:Src/Analog_PWM_Functions.c **** 	}
 316              		.loc 1 105 3 is_stmt 1 view .LVU78
 105:Src/Analog_PWM_Functions.c **** 	}
 317              		.loc 1 105 15 is_stmt 0 view .LVU79
ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 10


 318 000c 094B     		ldr	r3, .L29
 319 000e 0022     		movs	r2, #0
 320 0010 5A63     		str	r2, [r3, #52]
 321              	.L28:
 108:Src/Analog_PWM_Functions.c **** }
 322              		.loc 1 108 2 is_stmt 1 view .LVU80
 108:Src/Analog_PWM_Functions.c **** }
 323              		.loc 1 108 15 is_stmt 0 view .LVU81
 324 0012 084A     		ldr	r2, .L29
 325 0014 9369     		ldr	r3, [r2, #24]
 326 0016 43F00803 		orr	r3, r3, #8
 327 001a 9361     		str	r3, [r2, #24]
 109:Src/Analog_PWM_Functions.c **** 
 328              		.loc 1 109 1 view .LVU82
 329 001c 7047     		bx	lr
 330              	.L25:
  97:Src/Analog_PWM_Functions.c **** 		TIM16->CCR1 = TOP_PULSE_MAX;
 331              		.loc 1 97 9 is_stmt 1 view .LVU83
  97:Src/Analog_PWM_Functions.c **** 		TIM16->CCR1 = TOP_PULSE_MAX;
 332              		.loc 1 97 12 is_stmt 0 view .LVU84
 333 001e B0F5EB7F 		cmp	r0, #470
 334 0022 04DB     		blt	.L27
  98:Src/Analog_PWM_Functions.c **** 	} else {
 335              		.loc 1 98 3 is_stmt 1 view .LVU85
  98:Src/Analog_PWM_Functions.c **** 	} else {
 336              		.loc 1 98 15 is_stmt 0 view .LVU86
 337 0024 034B     		ldr	r3, .L29
 338 0026 4FF4EB72 		mov	r2, #470
 339 002a 5A63     		str	r2, [r3, #52]
 340 002c EDE7     		b	.L26
 341              	.L27:
 100:Src/Analog_PWM_Functions.c **** 	}
 342              		.loc 1 100 3 is_stmt 1 view .LVU87
 100:Src/Analog_PWM_Functions.c **** 	}
 343              		.loc 1 100 15 is_stmt 0 view .LVU88
 344 002e 014B     		ldr	r3, .L29
 345 0030 5863     		str	r0, [r3, #52]
 346 0032 EAE7     		b	.L26
 347              	.L30:
 348              		.align	2
 349              	.L29:
 350 0034 00440140 		.word	1073824768
 351              		.cfi_endproc
 352              	.LFE325:
 354              		.section	.text.setPulse,"ax",%progbits
 355              		.align	1
 356              		.global	setPulse
 357              		.syntax unified
 358              		.thumb
 359              		.thumb_func
 360              		.fpu fpv4-sp-d16
 362              	setPulse:
 363              	.LVL17:
 364              	.LFB326:
 112:Src/Analog_PWM_Functions.c **** 
 365              		.loc 1 112 1 is_stmt 1 view -0
 366              		.cfi_startproc
ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 11


 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 112:Src/Analog_PWM_Functions.c **** 
 369              		.loc 1 112 1 is_stmt 0 view .LVU90
 370 0000 08B5     		push	{r3, lr}
 371              	.LCFI2:
 372              		.cfi_def_cfa_offset 8
 373              		.cfi_offset 3, -8
 374              		.cfi_offset 14, -4
 114:Src/Analog_PWM_Functions.c **** 		setPulseBase(pulse, ON);
 375              		.loc 1 114 2 is_stmt 1 view .LVU91
 114:Src/Analog_PWM_Functions.c **** 		setPulseBase(pulse, ON);
 376              		.loc 1 114 5 is_stmt 0 view .LVU92
 377 0002 22B1     		cbz	r2, .L36
 116:Src/Analog_PWM_Functions.c **** 		setPulseMid(pulse, ON);
 378              		.loc 1 116 9 is_stmt 1 view .LVU93
 116:Src/Analog_PWM_Functions.c **** 		setPulseMid(pulse, ON);
 379              		.loc 1 116 12 is_stmt 0 view .LVU94
 380 0004 012A     		cmp	r2, #1
 381 0006 05D0     		beq	.L37
 118:Src/Analog_PWM_Functions.c **** 		setPulseTop(pulse, ON);
 382              		.loc 1 118 9 is_stmt 1 view .LVU95
 118:Src/Analog_PWM_Functions.c **** 		setPulseTop(pulse, ON);
 383              		.loc 1 118 12 is_stmt 0 view .LVU96
 384 0008 022A     		cmp	r2, #2
 385 000a 06D0     		beq	.L38
 386              	.LVL18:
 387              	.L31:
 121:Src/Analog_PWM_Functions.c **** 
 388              		.loc 1 121 1 view .LVU97
 389 000c 08BD     		pop	{r3, pc}
 390              	.LVL19:
 391              	.L36:
 115:Src/Analog_PWM_Functions.c **** 	} else if (link == 1) {
 392              		.loc 1 115 3 is_stmt 1 view .LVU98
 393 000e FFF7FEFF 		bl	setPulseBase
 394              	.LVL20:
 115:Src/Analog_PWM_Functions.c **** 	} else if (link == 1) {
 395              		.loc 1 115 3 is_stmt 0 view .LVU99
 396 0012 FBE7     		b	.L31
 397              	.LVL21:
 398              	.L37:
 117:Src/Analog_PWM_Functions.c **** 	} else if (link == 2) {
 399              		.loc 1 117 3 is_stmt 1 view .LVU100
 400 0014 FFF7FEFF 		bl	setPulseMid
 401              	.LVL22:
 117:Src/Analog_PWM_Functions.c **** 	} else if (link == 2) {
 402              		.loc 1 117 3 is_stmt 0 view .LVU101
 403 0018 F8E7     		b	.L31
 404              	.LVL23:
 405              	.L38:
 119:Src/Analog_PWM_Functions.c **** 	}
 406              		.loc 1 119 3 is_stmt 1 view .LVU102
 407 001a FFF7FEFF 		bl	setPulseTop
 408              	.LVL24:
 121:Src/Analog_PWM_Functions.c **** 
 409              		.loc 1 121 1 is_stmt 0 view .LVU103
ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 12


 410 001e F5E7     		b	.L31
 411              		.cfi_endproc
 412              	.LFE326:
 414              		.section	.text.getAnalogVal,"ax",%progbits
 415              		.align	1
 416              		.global	getAnalogVal
 417              		.syntax unified
 418              		.thumb
 419              		.thumb_func
 420              		.fpu fpv4-sp-d16
 422              	getAnalogVal:
 423              	.LVL25:
 424              	.LFB327:
 125:Src/Analog_PWM_Functions.c **** 	HAL_ADC_Start(ADC);
 425              		.loc 1 125 1 is_stmt 1 view -0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 0
 428              		@ frame_needed = 0, uses_anonymous_args = 0
 125:Src/Analog_PWM_Functions.c **** 	HAL_ADC_Start(ADC);
 429              		.loc 1 125 1 is_stmt 0 view .LVU105
 430 0000 10B5     		push	{r4, lr}
 431              	.LCFI3:
 432              		.cfi_def_cfa_offset 8
 433              		.cfi_offset 4, -8
 434              		.cfi_offset 14, -4
 435 0002 0446     		mov	r4, r0
 126:Src/Analog_PWM_Functions.c **** 	HAL_ADC_PollForConversion(ADC, 5);
 436              		.loc 1 126 2 is_stmt 1 view .LVU106
 437 0004 FFF7FEFF 		bl	HAL_ADC_Start
 438              	.LVL26:
 127:Src/Analog_PWM_Functions.c **** 	return HAL_ADC_GetValue(ADC);
 439              		.loc 1 127 2 view .LVU107
 440 0008 0521     		movs	r1, #5
 441 000a 2046     		mov	r0, r4
 442 000c FFF7FEFF 		bl	HAL_ADC_PollForConversion
 443              	.LVL27:
 128:Src/Analog_PWM_Functions.c **** }
 444              		.loc 1 128 2 view .LVU108
 128:Src/Analog_PWM_Functions.c **** }
 445              		.loc 1 128 9 is_stmt 0 view .LVU109
 446 0010 2046     		mov	r0, r4
 447 0012 FFF7FEFF 		bl	HAL_ADC_GetValue
 448              	.LVL28:
 129:Src/Analog_PWM_Functions.c **** 
 449              		.loc 1 129 1 view .LVU110
 450 0016 80B2     		uxth	r0, r0
 451 0018 10BD     		pop	{r4, pc}
 129:Src/Analog_PWM_Functions.c **** 
 452              		.loc 1 129 1 view .LVU111
 453              		.cfi_endproc
 454              	.LFE327:
 456              		.section	.text.analogToPulse,"ax",%progbits
 457              		.align	1
 458              		.global	analogToPulse
 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 13


 462              		.fpu fpv4-sp-d16
 464              	analogToPulse:
 465              	.LVL29:
 466              	.LFB329:
 136:Src/Analog_PWM_Functions.c **** 
 137:Src/Analog_PWM_Functions.c **** //return mapped pulse width for desired PWM channel
 138:Src/Analog_PWM_Functions.c **** //total period is 5 ms, max and min pulse widths vary between different servos
 139:Src/Analog_PWM_Functions.c **** int analogToPulse(int analogVal, TIM_HandleTypeDef *channel)
 140:Src/Analog_PWM_Functions.c **** {
 467              		.loc 1 140 1 is_stmt 1 view -0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471              		.loc 1 140 1 is_stmt 0 view .LVU113
 472 0000 00B5     		push	{lr}
 473              	.LCFI4:
 474              		.cfi_def_cfa_offset 4
 475              		.cfi_offset 14, -4
 476 0002 83B0     		sub	sp, sp, #12
 477              	.LCFI5:
 478              		.cfi_def_cfa_offset 16
 141:Src/Analog_PWM_Functions.c **** 	if (channel == &htim15) {
 479              		.loc 1 141 2 is_stmt 1 view .LVU114
 480              		.loc 1 141 5 is_stmt 0 view .LVU115
 481 0004 284B     		ldr	r3, .L59
 482 0006 9942     		cmp	r1, r3
 483 0008 09D0     		beq	.L56
 142:Src/Analog_PWM_Functions.c **** 		if (analogVal < BASE_ANALOG_MIN) {
 143:Src/Analog_PWM_Functions.c **** 			analogVal = BASE_ANALOG_MIN;
 144:Src/Analog_PWM_Functions.c **** 		} else if (analogVal > BASE_ANALOG_MAX) {
 145:Src/Analog_PWM_Functions.c **** 			analogVal = BASE_ANALOG_MAX;
 146:Src/Analog_PWM_Functions.c **** 		}
 147:Src/Analog_PWM_Functions.c **** 		return map(analogVal, BASE_ANALOG_MIN, BASE_ANALOG_MAX, BASE_PULSE_MIN, BASE_PULSE_MAX);
 148:Src/Analog_PWM_Functions.c **** 	} else if (channel == &htim4) {
 484              		.loc 1 148 9 is_stmt 1 view .LVU116
 485              		.loc 1 148 12 is_stmt 0 view .LVU117
 486 000a 284B     		ldr	r3, .L59+4
 487 000c 9942     		cmp	r1, r3
 488 000e 1CD0     		beq	.L57
 149:Src/Analog_PWM_Functions.c **** 		if (analogVal < MID_ANALOG_MIN) {
 150:Src/Analog_PWM_Functions.c **** 			analogVal = MID_ANALOG_MIN;
 151:Src/Analog_PWM_Functions.c **** 		} else if (analogVal > MID_ANALOG_MAX) {
 152:Src/Analog_PWM_Functions.c **** 			analogVal = MID_ANALOG_MAX;
 153:Src/Analog_PWM_Functions.c **** 		}
 154:Src/Analog_PWM_Functions.c **** 		return map(analogVal, MID_ANALOG_MIN, MID_ANALOG_MAX, MID_PULSE_MIN, MID_PULSE_MAX);
 155:Src/Analog_PWM_Functions.c **** 	} else if (channel == &htim16) {
 489              		.loc 1 155 9 is_stmt 1 view .LVU118
 490              		.loc 1 155 12 is_stmt 0 view .LVU119
 491 0010 274B     		ldr	r3, .L59+8
 492 0012 9942     		cmp	r1, r3
 493 0014 31D0     		beq	.L58
 156:Src/Analog_PWM_Functions.c **** 		if (analogVal < TOP_ANALOG_MIN) {
 157:Src/Analog_PWM_Functions.c **** 			analogVal = TOP_ANALOG_MIN;
 158:Src/Analog_PWM_Functions.c **** 		} else if (analogVal > TOP_ANALOG_MAX) {
 159:Src/Analog_PWM_Functions.c **** 			analogVal = TOP_ANALOG_MAX;
 160:Src/Analog_PWM_Functions.c **** 		}
 161:Src/Analog_PWM_Functions.c **** 		return map(analogVal, TOP_ANALOG_MIN, TOP_ANALOG_MAX, TOP_PULSE_MIN, TOP_PULSE_MAX);
ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 14


 162:Src/Analog_PWM_Functions.c **** 	}
 163:Src/Analog_PWM_Functions.c **** 	else {
 164:Src/Analog_PWM_Functions.c **** 		return 0;
 494              		.loc 1 164 10 view .LVU120
 495 0016 0020     		movs	r0, #0
 496              	.LVL30:
 497              	.L41:
 165:Src/Analog_PWM_Functions.c **** 	}
 166:Src/Analog_PWM_Functions.c **** }
 498              		.loc 1 166 1 view .LVU121
 499 0018 03B0     		add	sp, sp, #12
 500              	.LCFI6:
 501              		.cfi_remember_state
 502              		.cfi_def_cfa_offset 4
 503              		@ sp needed
 504 001a 5DF804FB 		ldr	pc, [sp], #4
 505              	.LVL31:
 506              	.L56:
 507              	.LCFI7:
 508              		.cfi_restore_state
 142:Src/Analog_PWM_Functions.c **** 			analogVal = BASE_ANALOG_MIN;
 509              		.loc 1 142 3 is_stmt 1 view .LVU122
 142:Src/Analog_PWM_Functions.c **** 			analogVal = BASE_ANALOG_MIN;
 510              		.loc 1 142 6 is_stmt 0 view .LVU123
 511 001e B0F5207F 		cmp	r0, #640
 512 0022 05DB     		blt	.L48
 144:Src/Analog_PWM_Functions.c **** 			analogVal = BASE_ANALOG_MAX;
 513              		.loc 1 144 10 is_stmt 1 view .LVU124
 144:Src/Analog_PWM_Functions.c **** 			analogVal = BASE_ANALOG_MAX;
 514              		.loc 1 144 13 is_stmt 0 view .LVU125
 515 0024 B0F52F6F 		cmp	r0, #2800
 516 0028 04DD     		ble	.L43
 145:Src/Analog_PWM_Functions.c **** 		}
 517              		.loc 1 145 14 view .LVU126
 518 002a 4FF42F60 		mov	r0, #2800
 519              	.LVL32:
 145:Src/Analog_PWM_Functions.c **** 		}
 520              		.loc 1 145 14 view .LVU127
 521 002e 01E0     		b	.L43
 522              	.LVL33:
 523              	.L48:
 143:Src/Analog_PWM_Functions.c **** 		} else if (analogVal > BASE_ANALOG_MAX) {
 524              		.loc 1 143 14 view .LVU128
 525 0030 4FF42070 		mov	r0, #640
 526              	.LVL34:
 527              	.L43:
 147:Src/Analog_PWM_Functions.c **** 	} else if (channel == &htim4) {
 528              		.loc 1 147 3 is_stmt 1 view .LVU129
 147:Src/Analog_PWM_Functions.c **** 	} else if (channel == &htim4) {
 529              		.loc 1 147 10 is_stmt 0 view .LVU130
 530 0034 4FF4F073 		mov	r3, #480
 531 0038 0093     		str	r3, [sp]
 532 003a 6E23     		movs	r3, #110
 533 003c 4FF42F62 		mov	r2, #2800
 534 0040 4FF42071 		mov	r1, #640
 535              	.LVL35:
 147:Src/Analog_PWM_Functions.c **** 	} else if (channel == &htim4) {
ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 15


 536              		.loc 1 147 10 view .LVU131
 537 0044 FFF7FEFF 		bl	map
 538              	.LVL36:
 147:Src/Analog_PWM_Functions.c **** 	} else if (channel == &htim4) {
 539              		.loc 1 147 10 view .LVU132
 540 0048 E6E7     		b	.L41
 541              	.LVL37:
 542              	.L57:
 149:Src/Analog_PWM_Functions.c **** 			analogVal = MID_ANALOG_MIN;
 543              		.loc 1 149 3 is_stmt 1 view .LVU133
 149:Src/Analog_PWM_Functions.c **** 			analogVal = MID_ANALOG_MIN;
 544              		.loc 1 149 6 is_stmt 0 view .LVU134
 545 004a 40F24D23 		movw	r3, #589
 546 004e 9842     		cmp	r0, r3
 547 0050 06DD     		ble	.L50
 151:Src/Analog_PWM_Functions.c **** 			analogVal = MID_ANALOG_MAX;
 548              		.loc 1 151 10 is_stmt 1 view .LVU135
 151:Src/Analog_PWM_Functions.c **** 			analogVal = MID_ANALOG_MAX;
 549              		.loc 1 151 13 is_stmt 0 view .LVU136
 550 0052 40F63633 		movw	r3, #2870
 551 0056 9842     		cmp	r0, r3
 552 0058 04DD     		ble	.L46
 152:Src/Analog_PWM_Functions.c **** 		}
 553              		.loc 1 152 14 view .LVU137
 554 005a 40F63630 		movw	r0, #2870
 555              	.LVL38:
 152:Src/Analog_PWM_Functions.c **** 		}
 556              		.loc 1 152 14 view .LVU138
 557 005e 01E0     		b	.L46
 558              	.LVL39:
 559              	.L50:
 150:Src/Analog_PWM_Functions.c **** 		} else if (analogVal > MID_ANALOG_MAX) {
 560              		.loc 1 150 14 view .LVU139
 561 0060 40F24E20 		movw	r0, #590
 562              	.LVL40:
 563              	.L46:
 154:Src/Analog_PWM_Functions.c **** 	} else if (channel == &htim16) {
 564              		.loc 1 154 3 is_stmt 1 view .LVU140
 154:Src/Analog_PWM_Functions.c **** 	} else if (channel == &htim16) {
 565              		.loc 1 154 10 is_stmt 0 view .LVU141
 566 0064 4FF4D273 		mov	r3, #420
 567 0068 0093     		str	r3, [sp]
 568 006a 5A23     		movs	r3, #90
 569 006c 40F63632 		movw	r2, #2870
 570 0070 40F24E21 		movw	r1, #590
 571              	.LVL41:
 154:Src/Analog_PWM_Functions.c **** 	} else if (channel == &htim16) {
 572              		.loc 1 154 10 view .LVU142
 573 0074 FFF7FEFF 		bl	map
 574              	.LVL42:
 154:Src/Analog_PWM_Functions.c **** 	} else if (channel == &htim16) {
 575              		.loc 1 154 10 view .LVU143
 576 0078 CEE7     		b	.L41
 577              	.LVL43:
 578              	.L58:
 156:Src/Analog_PWM_Functions.c **** 			analogVal = TOP_ANALOG_MIN;
 579              		.loc 1 156 3 is_stmt 1 view .LVU144
ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 16


 156:Src/Analog_PWM_Functions.c **** 			analogVal = TOP_ANALOG_MIN;
 580              		.loc 1 156 6 is_stmt 0 view .LVU145
 581 007a B0F5077F 		cmp	r0, #540
 582 007e 06DB     		blt	.L53
 158:Src/Analog_PWM_Functions.c **** 			analogVal = TOP_ANALOG_MAX;
 583              		.loc 1 158 10 is_stmt 1 view .LVU146
 158:Src/Analog_PWM_Functions.c **** 			analogVal = TOP_ANALOG_MAX;
 584              		.loc 1 158 13 is_stmt 0 view .LVU147
 585 0080 40F61333 		movw	r3, #2835
 586 0084 9842     		cmp	r0, r3
 587 0086 04DD     		ble	.L47
 159:Src/Analog_PWM_Functions.c **** 		}
 588              		.loc 1 159 14 view .LVU148
 589 0088 40F61330 		movw	r0, #2835
 590              	.LVL44:
 159:Src/Analog_PWM_Functions.c **** 		}
 591              		.loc 1 159 14 view .LVU149
 592 008c 01E0     		b	.L47
 593              	.LVL45:
 594              	.L53:
 157:Src/Analog_PWM_Functions.c **** 		} else if (analogVal > TOP_ANALOG_MAX) {
 595              		.loc 1 157 14 view .LVU150
 596 008e 4FF40770 		mov	r0, #540
 597              	.LVL46:
 598              	.L47:
 161:Src/Analog_PWM_Functions.c **** 	}
 599              		.loc 1 161 3 is_stmt 1 view .LVU151
 161:Src/Analog_PWM_Functions.c **** 	}
 600              		.loc 1 161 10 is_stmt 0 view .LVU152
 601 0092 4FF4EB73 		mov	r3, #470
 602 0096 0093     		str	r3, [sp]
 603 0098 5A23     		movs	r3, #90
 604 009a 40F61332 		movw	r2, #2835
 605 009e 4FF40771 		mov	r1, #540
 606              	.LVL47:
 161:Src/Analog_PWM_Functions.c **** 	}
 607              		.loc 1 161 10 view .LVU153
 608 00a2 FFF7FEFF 		bl	map
 609              	.LVL48:
 161:Src/Analog_PWM_Functions.c **** 	}
 610              		.loc 1 161 10 view .LVU154
 611 00a6 B7E7     		b	.L41
 612              	.L60:
 613              		.align	2
 614              	.L59:
 615 00a8 00000000 		.word	htim15
 616 00ac 00000000 		.word	htim4
 617 00b0 00000000 		.word	htim16
 618              		.cfi_endproc
 619              	.LFE329:
 621              		.section	.text.analogToDegrees,"ax",%progbits
 622              		.align	1
 623              		.global	analogToDegrees
 624              		.syntax unified
 625              		.thumb
 626              		.thumb_func
 627              		.fpu fpv4-sp-d16
ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 17


 629              	analogToDegrees:
 630              	.LVL49:
 631              	.LFB330:
 167:Src/Analog_PWM_Functions.c **** 
 168:Src/Analog_PWM_Functions.c **** //DISCONTINUED - FOR USE IN DEGREES MODE (TOO LOW RES)
 169:Src/Analog_PWM_Functions.c **** int analogToDegrees(int analogVal)
 170:Src/Analog_PWM_Functions.c **** {
 632              		.loc 1 170 1 is_stmt 1 view -0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 0
 635              		@ frame_needed = 0, uses_anonymous_args = 0
 636              		.loc 1 170 1 is_stmt 0 view .LVU156
 637 0000 00B5     		push	{lr}
 638              	.LCFI8:
 639              		.cfi_def_cfa_offset 4
 640              		.cfi_offset 14, -4
 641 0002 83B0     		sub	sp, sp, #12
 642              	.LCFI9:
 643              		.cfi_def_cfa_offset 16
 171:Src/Analog_PWM_Functions.c **** 	return map(analogVal, ANALOG_MIN, ANALOG_MAX, 0, 180);
 644              		.loc 1 171 2 is_stmt 1 view .LVU157
 645              		.loc 1 171 9 is_stmt 0 view .LVU158
 646 0004 B423     		movs	r3, #180
 647 0006 0093     		str	r3, [sp]
 648 0008 0023     		movs	r3, #0
 649 000a 40F6C412 		movw	r2, #2500
 650 000e 4FF42F71 		mov	r1, #700
 651 0012 FFF7FEFF 		bl	map
 652              	.LVL50:
 172:Src/Analog_PWM_Functions.c **** }
 653              		.loc 1 172 1 view .LVU159
 654 0016 03B0     		add	sp, sp, #12
 655              	.LCFI10:
 656              		.cfi_def_cfa_offset 4
 657              		@ sp needed
 658 0018 5DF804FB 		ldr	pc, [sp], #4
 659              		.cfi_endproc
 660              	.LFE330:
 662              		.section	.text.degreesToDC,"ax",%progbits
 663              		.align	1
 664              		.global	degreesToDC
 665              		.syntax unified
 666              		.thumb
 667              		.thumb_func
 668              		.fpu fpv4-sp-d16
 670              	degreesToDC:
 671              	.LVL51:
 672              	.LFB331:
 173:Src/Analog_PWM_Functions.c **** 
 174:Src/Analog_PWM_Functions.c **** //DISCONTINUED - FOR USE IN DEGREES MODE (TOO LOW RES)
 175:Src/Analog_PWM_Functions.c **** 
 176:Src/Analog_PWM_Functions.c **** int degreesToDC(int deg)
 177:Src/Analog_PWM_Functions.c **** {
 673              		.loc 1 177 1 is_stmt 1 view -0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 0
 676              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 18


 677              		.loc 1 177 1 is_stmt 0 view .LVU161
 678 0000 00B5     		push	{lr}
 679              	.LCFI11:
 680              		.cfi_def_cfa_offset 4
 681              		.cfi_offset 14, -4
 682 0002 83B0     		sub	sp, sp, #12
 683              	.LCFI12:
 684              		.cfi_def_cfa_offset 16
 178:Src/Analog_PWM_Functions.c **** 	return map(deg, 0, 180, 0, 98);
 685              		.loc 1 178 2 is_stmt 1 view .LVU162
 686              		.loc 1 178 9 is_stmt 0 view .LVU163
 687 0004 6223     		movs	r3, #98
 688 0006 0093     		str	r3, [sp]
 689 0008 0023     		movs	r3, #0
 690 000a B422     		movs	r2, #180
 691 000c 1946     		mov	r1, r3
 692 000e FFF7FEFF 		bl	map
 693              	.LVL52:
 179:Src/Analog_PWM_Functions.c **** }
 694              		.loc 1 179 1 view .LVU164
 695 0012 03B0     		add	sp, sp, #12
 696              	.LCFI13:
 697              		.cfi_def_cfa_offset 4
 698              		@ sp needed
 699 0014 5DF804FB 		ldr	pc, [sp], #4
 700              		.cfi_endproc
 701              	.LFE331:
 703              		.section	.text.degToPulse,"ax",%progbits
 704              		.align	1
 705              		.global	degToPulse
 706              		.syntax unified
 707              		.thumb
 708              		.thumb_func
 709              		.fpu fpv4-sp-d16
 711              	degToPulse:
 712              	.LVL53:
 713              	.LFB332:
 180:Src/Analog_PWM_Functions.c **** 
 181:Src/Analog_PWM_Functions.c **** //DISCONTINUED - FOR USE IN DEGREES MODE (TOO LOW RES)
 182:Src/Analog_PWM_Functions.c **** int degToPulse(int deg)
 183:Src/Analog_PWM_Functions.c **** {
 714              		.loc 1 183 1 is_stmt 1 view -0
 715              		.cfi_startproc
 716              		@ args = 0, pretend = 0, frame = 0
 717              		@ frame_needed = 0, uses_anonymous_args = 0
 718              		.loc 1 183 1 is_stmt 0 view .LVU166
 719 0000 00B5     		push	{lr}
 720              	.LCFI14:
 721              		.cfi_def_cfa_offset 4
 722              		.cfi_offset 14, -4
 723 0002 83B0     		sub	sp, sp, #12
 724              	.LCFI15:
 725              		.cfi_def_cfa_offset 16
 184:Src/Analog_PWM_Functions.c **** 	int MAX_PERIOD = __HAL_TIM_GET_AUTORELOAD(&htim15);
 726              		.loc 1 184 2 is_stmt 1 view .LVU167
 727              		.loc 1 184 19 is_stmt 0 view .LVU168
 728 0004 054B     		ldr	r3, .L67
ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 19


 729 0006 1B68     		ldr	r3, [r3]
 730 0008 DB6A     		ldr	r3, [r3, #44]
 731              	.LVL54:
 185:Src/Analog_PWM_Functions.c **** 	return map(deg, 0, 180, 50, MAX_PERIOD);
 732              		.loc 1 185 2 is_stmt 1 view .LVU169
 733              		.loc 1 185 9 is_stmt 0 view .LVU170
 734 000a 0093     		str	r3, [sp]
 735 000c 3223     		movs	r3, #50
 736              	.LVL55:
 737              		.loc 1 185 9 view .LVU171
 738 000e B422     		movs	r2, #180
 739 0010 0021     		movs	r1, #0
 740 0012 FFF7FEFF 		bl	map
 741              	.LVL56:
 186:Src/Analog_PWM_Functions.c **** }
 742              		.loc 1 186 1 view .LVU172
 743 0016 03B0     		add	sp, sp, #12
 744              	.LCFI16:
 745              		.cfi_def_cfa_offset 4
 746              		@ sp needed
 747 0018 5DF804FB 		ldr	pc, [sp], #4
 748              	.L68:
 749              		.align	2
 750              	.L67:
 751 001c 00000000 		.word	htim15
 752              		.cfi_endproc
 753              	.LFE332:
 755              		.text
 756              	.Letext0:
 757              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 758              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 759              		.file 4 "Inc/FreeRTOSConfig.h"
 760              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 761              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/system_stm32l4xx.h"
 762              		.file 7 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l475xx.h"
 763              		.file 8 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 764              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 765              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 766              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
 767              		.file 12 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash.h"
 768              		.file 13 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_spi.h"
 769              		.file 14 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
 770              		.file 15 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
 771              		.file 16 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-non
 772              		.file 17 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 773              		.file 18 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 774              		.file 19 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 775              		.file 20 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 776              		.file 21 "Drivers/STM32CubeL4_libs/Inc/net.h"
 777              		.file 22 "Drivers/STM32CubeL4_libs/Inc/iot_flash_config.h"
 778              		.file 23 "Inc/main.h"
 779              		.file 24 "Inc/CustomUserfunctions.h"
ARM GAS  C:\cygwin64\tmp\cchMLjUv.s 			page 20


DEFINED SYMBOLS
                            *ABS*:00000000 Analog_PWM_Functions.c
C:\cygwin64\tmp\cchMLjUv.s:18     .text.map:00000000 $t
C:\cygwin64\tmp\cchMLjUv.s:25     .text.map:00000000 map
C:\cygwin64\tmp\cchMLjUv.s:66     .text.setDuty:00000000 $t
C:\cygwin64\tmp\cchMLjUv.s:73     .text.setDuty:00000000 setDuty
C:\cygwin64\tmp\cchMLjUv.s:147    .text.setDuty:00000040 $d
C:\cygwin64\tmp\cchMLjUv.s:154    .text.setPulseBase:00000000 $t
C:\cygwin64\tmp\cchMLjUv.s:161    .text.setPulseBase:00000000 setPulseBase
C:\cygwin64\tmp\cchMLjUv.s:216    .text.setPulseBase:00000034 $d
C:\cygwin64\tmp\cchMLjUv.s:221    .text.setPulseMid:00000000 $t
C:\cygwin64\tmp\cchMLjUv.s:228    .text.setPulseMid:00000000 setPulseMid
C:\cygwin64\tmp\cchMLjUv.s:283    .text.setPulseMid:00000034 $d
C:\cygwin64\tmp\cchMLjUv.s:288    .text.setPulseTop:00000000 $t
C:\cygwin64\tmp\cchMLjUv.s:295    .text.setPulseTop:00000000 setPulseTop
C:\cygwin64\tmp\cchMLjUv.s:350    .text.setPulseTop:00000034 $d
C:\cygwin64\tmp\cchMLjUv.s:355    .text.setPulse:00000000 $t
C:\cygwin64\tmp\cchMLjUv.s:362    .text.setPulse:00000000 setPulse
C:\cygwin64\tmp\cchMLjUv.s:415    .text.getAnalogVal:00000000 $t
C:\cygwin64\tmp\cchMLjUv.s:422    .text.getAnalogVal:00000000 getAnalogVal
C:\cygwin64\tmp\cchMLjUv.s:457    .text.analogToPulse:00000000 $t
C:\cygwin64\tmp\cchMLjUv.s:464    .text.analogToPulse:00000000 analogToPulse
C:\cygwin64\tmp\cchMLjUv.s:615    .text.analogToPulse:000000a8 $d
C:\cygwin64\tmp\cchMLjUv.s:622    .text.analogToDegrees:00000000 $t
C:\cygwin64\tmp\cchMLjUv.s:629    .text.analogToDegrees:00000000 analogToDegrees
C:\cygwin64\tmp\cchMLjUv.s:663    .text.degreesToDC:00000000 $t
C:\cygwin64\tmp\cchMLjUv.s:670    .text.degreesToDC:00000000 degreesToDC
C:\cygwin64\tmp\cchMLjUv.s:704    .text.degToPulse:00000000 $t
C:\cygwin64\tmp\cchMLjUv.s:711    .text.degToPulse:00000000 degToPulse
C:\cygwin64\tmp\cchMLjUv.s:751    .text.degToPulse:0000001c $d

UNDEFINED SYMBOLS
htim15
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
htim4
htim16
